package com.example.demoimportsystem.controllers;

import com.example.demoimportsystem.DemoApplication;
import com.example.demoimportsystem.daos.OrderListDAO;
import com.example.demoimportsystem.models.OrderList;
import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.HBox;
import javafx.stage.Stage;

import javax.crypto.spec.PSource;
import java.io.IOException;
import java.time.format.DateTimeFormatter;
import java.util.List;

public class OrderListController {
    @FXML
    private Button homeButton;

    @FXML
    private TableView<OrderList> orderListTable;

    @FXML
    private TableColumn<OrderList, Long> columnOrdinalNumber;

    @FXML
    private TableColumn<OrderList, String> columnListCode;

    @FXML
    private TableColumn<OrderList, String> columnCreatedBy;

    @FXML
    private TableColumn<OrderList, String> columnCreatedDate;

    @FXML
    private TableColumn<OrderList, String> columnStatus;

    @FXML
    private TableColumn<OrderList, String> columnAction;

    @FXML
    private TextField textFieldListCode;

    @FXML
    private TextField textFieldCreatedBy;

    @FXML
    private ComboBox<String> comboBoxStatus;

    @FXML
    private Button buttonSearch;

    // D·ªØ li·ªáu hi·ªÉn th·ªã trong b·∫£ng (ObservableList cho TableView)
    private ObservableList<OrderList> orderLists;

    // DAO ƒë·ªÉ t∆∞∆°ng t√°c v·ªõi c∆° s·ªü d·ªØ li·ªáu
    private OrderListDAO orderListDAO = new OrderListDAO();

    private Long selectedOrderListId;

    @FXML
    public void initialize() {
        // C·∫•u h√¨nh c√°c c·ªôt trong b·∫£ng (map d·ªØ li·ªáu v√†o c·ªôt)
        columnOrdinalNumber.setCellValueFactory(new PropertyValueFactory<>("id"));
        columnListCode.setCellValueFactory(new PropertyValueFactory<>("listCode"));

        // C·ªôt n√†y hi·ªÉn th·ªã username t·ª´ ƒë·ªëi t∆∞·ª£ng User
        columnCreatedBy.setCellValueFactory(cellData ->
                new SimpleStringProperty(cellData.getValue().getCreatedBy().getUsername()));

        // Format ng√†y th√°ng hi·ªÉn th·ªã trong b·∫£ng
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
        columnCreatedDate.setCellValueFactory(cellData ->
                new SimpleStringProperty(cellData.getValue().getCreatedDate().format(formatter)));

        // Hi·ªÉn th·ªã tr·∫°ng th√°i ƒë∆°n h√†ng
        columnStatus.setCellValueFactory(cellData ->
                new SimpleStringProperty(cellData.getValue().getStatus().getVietnamese()));

        // Th√™m n√∫t v√†o c·ªôt "T√°c v·ª•"
        columnAction.setCellFactory(param -> {
            TableCell<OrderList, String> cell = new TableCell<>() {
                private final Button editButton = new Button("‚úèÔ∏è"); // N√∫t s·ª≠a
                private final Button viewButton = new Button("üëÅÔ∏è"); // N√∫t xem
                final HBox hbox = new HBox(editButton, viewButton);

                {
                    viewButton.setOnAction(event -> {
                        OrderList orderList = getTableView().getItems().get(getIndex());
                        selectedOrderListId = orderList.getId();
//                        showOrderListDetail(selectedOrderListId);
                        showOrderListDetail(orderList);
                    });

                    editButton.setOnAction(event -> {
                        // Code x·ª≠ l√Ω khi nh·∫•n "S·ª≠a" -> b·ªè qua
                    });

                    hbox.setSpacing(5);  // Kho·∫£ng c√°ch gi·ªØa 2 n√∫t
                }

                @Override
                protected void updateItem(String item, boolean empty) {
                    super.updateItem(item, empty);
                    if (empty) {
                        setGraphic(null);
                    } else {
                        setGraphic(hbox);
                    }
                }
            };
            return cell;
        });

        // T·∫£i d·ªØ li·ªáu t·ª´ c∆° s·ªü d·ªØ li·ªáu v√† hi·ªÉn th·ªã trong b·∫£ng
        loadOrderLists();

        buttonSearch.setOnAction(event -> filterOrderList());
    }

    // Ph∆∞∆°ng th·ª©c t·∫£i d·ªØ li·ªáu t·ª´ c∆° s·ªü d·ªØ li·ªáu v√† hi·ªÉn th·ªã trong TableView
    private void loadOrderLists() {
        List<OrderList> orderListFromDB = orderListDAO.getAllOrderLists();
        orderLists = FXCollections.observableArrayList(orderListFromDB);
        orderListTable.setItems(orderLists);
    }

//    // Ph∆∞∆°ng th·ª©c n√†y c√≥ th·ªÉ d√πng ƒë·ªÉ l√†m m·ªõi l·∫°i d·ªØ li·ªáu trong b·∫£ng (n·∫øu c·∫ßn thi·∫øt)
//    public void refreshOrderListTable() {
//        loadOrderLists();  // T·∫£i l·∫°i d·ªØ li·ªáu
//    }

    //filter
    private void filterOrderList() {
        String listCodeFilter = textFieldListCode.getText().toLowerCase();
        String createdByFilter = textFieldCreatedBy.getText().toLowerCase();
        String statusFilter = comboBoxStatus.getValue();

        //t·∫°o list ch·ª©a c√°c order ƒëc l·ªçc
        ObservableList<OrderList> filteredList = FXCollections.observableArrayList();

        for (OrderList order : orderLists) {
            //ktra code tr·ªëng || gi√° tr·ªã nh·∫≠p v√†o c√≥ trong listCodeFilter => matches = true
            boolean matches = listCodeFilter.isEmpty() || order.getListCode().toLowerCase().contains(listCodeFilter);

            if (!createdByFilter.isEmpty() && !order.getCreatedBy().getUsername().toLowerCase().contains(createdByFilter)) {
                matches = false;
            }

            if (statusFilter != null && !statusFilter.equals("Tr·∫°ng th√°i") &&
                    !order.getStatus().getVietnamese().equals(statusFilter)) {
                matches = false;
            }

            //matches = true -> add order v√†o listFilter
            if (matches) {
                filteredList.add(order);
            }
        }

        orderListTable.setItems(filteredList);
    }

    // Ph∆∞∆°ng th·ª©c x·ª≠ l√Ω s·ª± ki·ªán khi b·∫•m v√†o"Trang ch·ªß"
    public void handleHomepage(javafx.event.ActionEvent actionEvent) throws IOException {
        FXMLLoader fxmlLoader = new FXMLLoader(DemoApplication.class.getResource("home.fxml"));
        Parent root = fxmlLoader.load();
        Scene scene = new Scene(root, 900, 600);

        Stage stage = (Stage) homeButton.getScene().getWindow();
        stage.setScene(scene);
    }

    //hi·ªÉn th·ªã chi ti·∫øt ds khi nh·∫•n n√∫t "üëÅÔ∏è"
    public void showOrderListDetail(OrderList orderList) {
        try {
            FXMLLoader fxmlLoader = new FXMLLoader(DemoApplication.class.getResource("order-list-details.fxml"));
            Parent root = fxmlLoader.load();

            // L·∫•y controller c·ªßa trang chi ti·∫øt v√† truy·ªÅn ƒë·ªëi t∆∞·ª£ng OrderList
            OrderListDetailsController detailsController = fxmlLoader.getController();
//            detailsController.setOrderListId(orderListId);
            detailsController.setOrderList(orderList);
            detailsController.initialize();

            // Hi·ªÉn th·ªã trang chi ti·∫øt
            Stage stage = new Stage();
            stage.setScene(new Scene(root));
            stage.show();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

}
